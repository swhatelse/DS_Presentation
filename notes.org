* DONE Introduction [2/2]
*** DONE Why Raft?
- Paxos:
  - Most of consenus implementations based on it
  - But difficult to understand \to difficult to set up
- Goal:
  - Design *understandable* consensus algorithm
*** DONE Caracteristics
     - Applied technics to improve understandability:
       - Decomposition:
         - Leader election
         - Log replication
         - Safety
       - State space reduction:
         - Reduce nonderterminism
         - The way the server are consistents
     - Use of novel features:
       - Strong leader
       - Leader election
       - Membership changes
* DONE Replicated state machines
  - Implemented using replicated log
  - Consistency of replicated log ensure by consensus algo
  - General principle of consensus algo (like we saw in course):
    - Receive request of client
    - Aggreed with other server on the order
    - Append it to its log
    - Process the log (each process)
    - Send result to client
  # The two last points are missing
* DONE The problem with Paxos
  - Advantages:
    - Capabilities
      - reaching agreement on a single decision
      - combination of instances \to facilitate series of decision (multi-Paxos) 
      - Membership changes
    - Ensure:
      - safety
      - liveness
    - Has been proven
  - Drawbacks:
    - Very difficult to understand \to took one year understand completly, 
      only few persons understand it 
    - Due to its Single-decree fundation \to should be decomposed
    - lack of details, different interpretation
    - architecture of PaXos not suited for most practical systems
    - Difficulties to implement \to real implemention different from Paxos
      \to build on top unproven system.
* DONE Designing for understandability
  - Choices made around understandabilty
  - Easier to understand the algo, develop intuitions
	\to easier to extend to real-world implementations
  - 2 technics:
    - Problem decomposition
      - election leader, log replication, safety, membership
        changes \to independants
    - Reduce state space
      - eliminates nondeterminism where needed
* TODO Raft [5/6]
** DONE Basics
   - 3 states: 
     - leader: handles requests 
     - follower: responde to the leader 
     - candidate: used to elect a new leader
   - Time divided in terms.
	 - Term starts with on election
	 - Used as logical clock
** DONE Leader election
   - Leader send heartbeat to followers
   - Followers have a timeout, if they don't receive an
	 heartbeat from the leader before the timeout \to candidate
	 state.
   - Candidate trigger an election 
     - Increment term 
	 - Vote for him self
     - send RPC Vote, first come first serve
	 - Win if majority votes.
	 - other server send a vote, they reject the vote request if the term 
       number is less or if they already have responded
	 - Stay in candidate state until:
	   - win the election
		 - Send heartbeat to establish its authority
	   - another win
	     - received heartbeat from leader at least same term
	   - timeout
** DONE Log replication
*** DONE Principle
   - Clients send commands to the leader
   - Leader replicates log on the followers \to log commited when
     replicated in majority 
   - When committed \to apply it to all state machines
   - Sends result to the client
*** DONE Consistency check
   - Leader check its logs are consistent with others:
	 - send the last index + term of its logs
	 - look for the moment when start diverging \to remove
	   all logs after this point and send its log after this point.
	   - when not matching decrements nextIndex until it finds a
		 matching log.
    
** TODO Safety [2/3]
*** DONE Election restrictions
    A leader stores all the committed logs of the previous term \to a
    candidate can be elected only if it is up-to-date. That means it
    must at least have the same logs than the majority and maybe more
    but not less.
    Raft compare index + term of the last log \to leader append
    informations on its logs and voters vote for candidates that are
    at least as up-to-date as them. 
*** DONE Committing entries from previous terms
	It is possible that an entry is replicated on the majority but not
	committed if the leader crashes before committing. Thus it may be
	possible to have previous terms with entry not committed. Next
	leader could try to commit it. 

    All not committed yet entries from previous terms are committed
    when a log from the current term is committed. 
*** TODO Safety argument 
** DONE Follower and candidate crashes
   - Leader keeps sending RPC until the candidature/follower recovers.
   - RPC are idempotents.
** DONE Timing and avaibility
   - Import for the correctness of election mechanism.
   - BroadcastTime << electionTimeout << MTBF (mean time before failure for a single node)
	 - broadcastTime << electionTime \to leader can send reliably timeout
	 - electionTime << MTBF \to the system can make progress without trigger unnecessary 
       election.
   - Only electionTimeout can be tuned and must be choosen according to BCtime and MTBF
* DONE Cluster membership changes
  - View change
** Principles
   - Impossible to switch directly from C_new to C_old \to disjoint
     majorities.
     Raft use a transition phase : joint consensus.
     In the joint consensus C_new and C_old can coexist (C_old,C_New) and
     can still take request from client. In other approach it is
     generally not the case (request are disable in the transition
     phase).
   - Functioning:
     - The leader start the transition by saving its configuration \to
       start the C_old,C_new configuration. It replicates it. 
     - During this time C_old can still make decision freely because
       the majority is still in C_old
     - Once C_old,C_new as been committed, the majority is in
       transition. So servers that are still in C_old and those are
       already in C_new need the approval of C_old,C_new.
     - Then the leader create the C_new configuration and replicates
       it. Once C_new is committed C_old is irrevelant and C_old servers
       can be shut down.
** Problems that may happens
  - Possible to have two leaders elected in the same term \to splitted
    majority.
  - atomic switch of all the server impossible \to two-phase approach \to
    joint consensus 
  - when joining server may not have any logs:
    - pre-join \to non-voting server \to can retrieve the log without
      interferring (impossibility to commit log)
      # Why the non-voting prevent to block commit?
  - leader removed (not anymore in the config)
	- become follower after C_new committed
  - Interferences of removed servers
	- Will not receive heartbeat \to trigger election with new term
	- Current leader \to follower
	- removed server timeout and repeat again
	  # So what is the solution? 
* DONE Implementation and evalution [3/3]
** DONE Understandability
   - Took student from Stanford University and U.C. Berkeley
   - Video lecture on Paxos and Raft
   - Quizzes \to Raft has better notes
** DONE Correctness
   - Cf. safety proof. 
   - Relies on invariant that have not been checked.
** DONE Perfomances
   - Replication use minimal number of message 
   - 2 concern 
     - Time of convergence of the election
	   What takes time is the split votes.
	   To reduce chances of split vote \to use of randomness
     - Down time
	   function of the election timeout. The smaller it is the smaller the down time.
	   But can not be to small \to unnecessary leader changes
   - Remark:
	 Number of process used is missing. Would be interesting to know if the election process 
     is really scallable. With lots of nodes more likely to have splitted votes \to the 
     process could repeat a during a log time. 
     Maybe increase election timeout \to increase downtime.
